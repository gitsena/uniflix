// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// generator client {
 // provider = "prisma-client-js"
 // output   = "../generated/prisma"
// }

// datasource db {
 // provider = "postgresql"
 // url      = env("DATABASE_URL")
// }

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" // ou "postgresql" se usar outro banco
  url      = env("DATABASE_URL")
}

model Usuario {
  id           Int       @id @default(autoincrement())
  nome         String
  email        String    @unique
  senha        String
  dataCadastro DateTime  @default(now())

  // Relacionamentos
  comentarios   Comentario[]
  avaliacoes    Avaliacao[]
  historico     HistoricoUsuario[]
  favoritos     Filme[] @relation("Favoritos", references: [id])
}

model Filme {
  id          Int       @id @default(autoincrement())
  titulo      String
  descricao   String
  diretor     String
  ano         Int
  duracao     Int
  categoria   String
  classificacaoEtaria String
  urlImagem   String?
  dataCriacao DateTime  @default(now())

  // Relacionamentos
  comentarios Comentario[]
  avaliacoes  Avaliacao[]
  historico   HistoricoUsuario[]
  favoritadoPor Usuario[] @relation("Favoritos", references: [id])
}

model Comentario {
  id        Int      @id @default(autoincrement())
  texto     String
  data      DateTime @default(now())
  
  // Relacionamentos
  usuarioId Int
  filmeId   Int
  usuario   Usuario @relation(fields: [usuarioId], references: [id])
  filme     Filme   @relation(fields: [filmeId], references: [id])
}

model Avaliacao {
  id        Int     @id @default(autoincrement())
  nota      Int     // Ex: 1 a 5
  comentario String?
  data      DateTime @default(now())
  
  // Relacionamentos
  usuarioId Int
  filmeId   Int
  usuario   Usuario @relation(fields: [usuarioId], references: [id])
  filme     Filme   @relation(fields: [filmeId], references: [id])
}

model HistoricoUsuario {
  id        Int      @id @default(autoincrement())
  assistidoEm DateTime @default(now())

  // Relacionamentos
  usuarioId Int
  filmeId   Int
  usuario   Usuario @relation(fields: [usuarioId], references: [id])
  filme     Filme   @relation(fields: [filmeId], references: [id])
}
